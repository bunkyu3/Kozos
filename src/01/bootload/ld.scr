/*機械語コードや静的領域をどのようにアドレス割当するのかを決める*/

/* OUTPUT_FORMAT("elf32-h8300") */
OUTPUT_ARCH(h8300h)
ENTRY("_start")

MEMORY	/*各メモリ領域を定義*/
{
	/*ROMの定義*/
	romall(rx)	: o = 0x000000, l = 0x080000	/*ROM全体を示す、oは開始アドレス、lは領域のサイズ(512KB)*/
	vectors(r)	: o = 0x000000, l = 0x000100	/*割り込みベクタ領域を示す、ゼロ番地から256バイトの領域*/
	rom(rx)			: o = 0x000100, l = 0x07ff00	
	/*RAMの定義*/
	ramall(rwx)	: o = 0xffbf20, l = 0x004000	/*RAMの全域を示す、16KB*/
	data(rwx)		: o = 0xfffc20, l = 0x000300	
	stack(rw)		: o = 0xffff00, l = 0x000000	/*end of RAM*/
}

SECTIONS	/*以下はセクション定義*/
{
	/*割り込みベクタ*/
	.vectors : {			/*.vectorsというセクションを作成*/
		vector.o(.data)	/*vector.oの.dataセクションの内容をそのセクションに配置する*/
										/*つまり、vector.cで定義された、割り込みベクタがゼロ番地に配置される*/
	} > vectors				/*割り込みベクタ領域に配置する*/

	/*テキスト領域*/
	.text : {						/*.textというセクションを作成*/
		_text_start = . ;	/*textセクションの先頭を指すシンボルを配置*/
		*(.text)					/*各オブジェクトファイルの.textセクションの内容がここに集められる*/
		_etext = . ;			/*.textセクションの終端を指すシンボルを配置*/
	} > rom							/*.textセクションはROMに配置する*/

	.rodata : {	/*.rodataというセクションを作成、const定義した変数や文字列リテラルなどを配置*/
		_rodata_start = . ;
		*(.strings)
		*(.rodata)
		*(.rodata.*)
		_erodata = . ;
	}	> rom

	/*データ領域*/
	.data : {
		_data_start = . ;	
		*(.data)
		_edata = . ;
	} > data AT> rom			/*.dataセクションの「VA≠PA」対応*/

	/*BSS領域*/
	.bss : {
		_bss_start = . ;
		*(.bss)
		*(COMMON)
		_ebss = . ;
	} > data AT> rom			/*.bssセクションの「VA≠PA」対応*/

	. = ALIGN(4);					/*ロケーション・カウンタを４の倍数にする*/
	_end = . ;						/*_endシンボル（変数みたいなもの）を.bssの終端に配置*/

	.stack : {
		_stack = . ;				/*スタックを指すシンボルを配置する*/
	} > stack							

}
